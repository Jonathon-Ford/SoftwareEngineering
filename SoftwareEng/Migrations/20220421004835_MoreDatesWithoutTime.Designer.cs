// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SoftwareEng.DataModels;

#nullable disable

namespace SoftwareEng.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20220421004835_MoreDatesWithoutTime")]
    partial class MoreDatesWithoutTime
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BaseRates", b =>
                {
                    b.Property<int>("BaseRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BaseRateID"), 1L, 1);

                    b.Property<DateTime>("DateSet")
                        .HasColumnType("Date");

                    b.Property<DateTime>("EffectiveDate")
                        .HasColumnType("Date");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.HasKey("BaseRateID");

                    b.ToTable("BaseRates");
                });

            modelBuilder.Entity("BaseRatesReservations", b =>
                {
                    b.Property<int>("BaseRatesBaseRateID")
                        .HasColumnType("int");

                    b.Property<int>("ReservationsReservationID")
                        .HasColumnType("int");

                    b.HasIndex("BaseRatesBaseRateID");

                    b.HasIndex("ReservationsReservationID");

                    b.ToTable("BaseRatesReservations");
                });

            modelBuilder.Entity("BaseRatesReservations1", b =>
                {
                    b.Property<int>("BaseRatesBaseRateID")
                        .HasColumnType("int");

                    b.Property<int>("ReservationsReservationID")
                        .HasColumnType("int");

                    b.HasKey("BaseRatesBaseRateID", "ReservationsReservationID");

                    b.HasIndex("ReservationsReservationID");

                    b.ToTable("BaseRatesReservations1");
                });

            modelBuilder.Entity("ChangedTo", b =>
                {
                    b.Property<int>("NewReservationReservationID")
                        .HasColumnType("int");

                    b.Property<int>("OldReservationReservationID")
                        .HasColumnType("int");

                    b.HasIndex("NewReservationReservationID");

                    b.HasIndex("OldReservationReservationID");

                    b.ToTable("ChangedTo");
                });

            modelBuilder.Entity("CreditCards", b =>
                {
                    b.Property<long>("CardNum")
                        .HasColumnType("bigint");

                    b.Property<int>("CVVNum")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("Date");

                    b.HasKey("CardNum");

                    b.ToTable("CreditCards");
                });

            modelBuilder.Entity("Payments", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentID"), 1L, 1);

                    b.Property<long>("CardNum")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("Date");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("ReservationID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("CardNum");

                    b.HasIndex("ReservationID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Reservations", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationID"), 1L, 1);

                    b.Property<long>("CardNum")
                        .HasColumnType("bigint");

                    b.Property<bool>("CheckedIn")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckedOut")
                        .HasColumnType("bit");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateCanceled")
                        .HasColumnType("Date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsCanceled")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("Date");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("ReservationTypeReservationID")
                        .HasColumnType("int");

                    b.Property<int>("RoomNum")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("ReservationID");

                    b.HasIndex("CardNum");

                    b.HasIndex("ReservationTypeReservationID");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("ReservationTypes", b =>
                {
                    b.Property<int>("ReservationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReservationID"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<float>("PercentOfBase")
                        .HasColumnType("real");

                    b.HasKey("ReservationID");

                    b.ToTable("ReservationTypes");
                });

            modelBuilder.Entity("Users", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"), 1L, 1);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BaseRatesReservations", b =>
                {
                    b.HasOne("BaseRates", "BaseRates")
                        .WithMany()
                        .HasForeignKey("BaseRatesBaseRateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservations", "Reservations")
                        .WithMany()
                        .HasForeignKey("ReservationsReservationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseRates");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("BaseRatesReservations1", b =>
                {
                    b.HasOne("BaseRates", null)
                        .WithMany()
                        .HasForeignKey("BaseRatesBaseRateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservations", null)
                        .WithMany()
                        .HasForeignKey("ReservationsReservationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChangedTo", b =>
                {
                    b.HasOne("Reservations", "NewReservation")
                        .WithMany()
                        .HasForeignKey("NewReservationReservationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservations", "OldReservation")
                        .WithMany()
                        .HasForeignKey("OldReservationReservationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NewReservation");

                    b.Navigation("OldReservation");
                });

            modelBuilder.Entity("Payments", b =>
                {
                    b.HasOne("CreditCards", "Card")
                        .WithMany()
                        .HasForeignKey("CardNum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reservations", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("Reservation");
                });

            modelBuilder.Entity("Reservations", b =>
                {
                    b.HasOne("CreditCards", "Card")
                        .WithMany()
                        .HasForeignKey("CardNum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReservationTypes", "ReservationType")
                        .WithMany()
                        .HasForeignKey("ReservationTypeReservationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Card");

                    b.Navigation("ReservationType");
                });
#pragma warning restore 612, 618
        }
    }
}
